variables:
    DOCKER_DRIVER: overlay2
    DOCKER_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH
    APP_ENV: test
    APP_SECRET: a448d1dfcaa563fce56c2fd9981f662b
    MAILER_URL: null://localhost
    MYSQL_ALLOW_EMPTY_PASSWORD: "no"
    MYSQL_ROOT_PASSWORD: root
    MYSQL_DATABASE: su_website
    MYSQL_USER: website
    DATABASE_URL: "mysql://root:root@mysql:3306/su_website"
    EMAIL_FROM_ADDRESS: admin@localhost
    COMPOSER_PROCESS_TIMEOUT: "1200" # int is not supported by local gitlab-runner
    VERSION_TAG: "VERSION_TAG=${CI_COMMIT_REF_SLUG}-$(git describe --abbrev=0 --tags)"
    XDEBUG_ENABLED: 0
    APP_BASEDIR_LOG: /app/log
    APP_WEBROOT: /app/src/public
    APP_BASEDIR_TMP: /app/tmp
    CONTAINER_DEBUG: 0

stages:
    - install
    - test
    - build
    - deploy

composer:
    stage: install
    image: composer:latest
    before_script:
        - composer config -g cache-dir "$(pwd)/.composer-cache"
    script:
        - cd app/src/
        - composer install -n --prefer-dist --no-scripts
        - composer test install
        - curl --show-error --silent https://getcomposer.org/installer | php
    artifacts:
        name: composer-dependencies
        expire_in: 8 hours
        paths:
            - app/src/vendor
            - app/src/composer.phar
    cache:
        key: composer
        paths:
            - app/src/.composer-cache/
    except:
        - /^fastlane\/.+$/

test:
    cache:
        key: composer
        paths:
            - .composer-cache/
    stage: test
    image: sulu/php:7.3-cli
    allow_failure: true
    services:
        - mysql:5.7
    before_script:
        - cd app/src/
        - php composer.phar bootstrap-test-environment
    script:
        - cd app/src/
        - php composer.phar test
    except:
        - /^fastlane\/.+$/

lint:
    cache:
        key: composer
        paths:
            - .composer-cache/
    stage: test
    image: sulu/php:7.3-cli
    allow_failure: true
    services:   
        - mysql:5.7
    before_script:
        - cd app/src/
        - php composer.phar bootstrap-test-environment
    script:
        - cd app/src/
        - php composer.phar lint
    except:
        - /^fastlane\/.+$/

js-css-admin:
    stage: test
    image: node:12
    allow_failure: true
    dependencies: []
    variables:
        NODE_OPTIONS: --max-old-space-size=1536
    before_script:
        - npm config set cache "$(pwd)/.npm-cache"
    script:
        - cd app/src/assets/admin/
        - npm ci
        - npm run build
    cache:
        key: npm
        paths:
            - .npm-cache/
    except:
        - /^fastlane\/.+$/
js-css-website:
    stage: test
    image: node:12
    allow_failure: true
    dependencies: []
    variables:
        NODE_OPTIONS: --max-old-space-size=1536
    before_script:
        - npm config set cache "$(pwd)/.npm-cache"
    script:
        - cd app/src/
        - cd assets/website/
        - npm ci
        - npm run build
    cache:
        key: npm
        paths:
            - .npm-cache/
    except:
        - /^fastlane\/.+$/

security-check:
    stage: test
    image: sulu/php:7.3-cli
    script:
        - php composer.phar security-check
    allow_failure: true
    except:
        - /^fastlane\/.+$/

build:
    stage: build
    services:
        - docker:18-dind
    image: docker:latest
    dependencies: []
    before_script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        - export TAG=$(git describe --abbrev=0 --tags)
        - if [ ${CI_COMMIT_REF_SLUG} == 'master' ]; then export VERSION_TAG=${TAG}; else export VERSION_TAG=${CI_COMMIT_REF_SLUG}; fi;
    script:
        # try to pull previously built images to utilize docker cache during new build
        - docker pull $DOCKER_IMAGE/composer:latest || true
        - docker pull $DOCKER_IMAGE/node-admin:latest || true
        - docker pull $DOCKER_IMAGE/node-website:latest || true
        - docker pull $DOCKER_IMAGE/server:latest || true
        # build and tag intermediate images and application image
        - docker build . --target composer -t $DOCKER_IMAGE/composer:latest
            --cache-from $DOCKER_IMAGE/composer:latest
        - docker build . --target node-admin -t $DOCKER_IMAGE/node-admin:latest
            --cache-from $DOCKER_IMAGE/composer:latest
            --cache-from $DOCKER_IMAGE/node-admin:latest
        - docker build . --target node-website -t $DOCKER_IMAGE/node-website:latest
            --cache-from $DOCKER_IMAGE/composer:latest
            --cache-from $DOCKER_IMAGE/node-admin:latest
            --cache-from $DOCKER_IMAGE/node-website:latest
        - docker build . --target server -t $DOCKER_IMAGE/server:latest
            --cache-from $DOCKER_IMAGE/composer:latest
            --cache-from $DOCKER_IMAGE/node-admin:latest
            --cache-from $DOCKER_IMAGE/node-website:latest
            --cache-from $DOCKER_IMAGE/server:latest
        - docker build . --target production -t $DOCKER_IMAGE/production:$TAG
            --cache-from $DOCKER_IMAGE/composer:latest
            --cache-from $DOCKER_IMAGE/node-admin:latest
            --cache-from $DOCKER_IMAGE/node-website:latest
            --cache-from $DOCKER_IMAGE/server:latest
        - docker build . --target staging  -t $DOCKER_IMAGE/staging:$TAG
            --cache-from $DOCKER_IMAGE/composer:latest
            --cache-from $DOCKER_IMAGE/node-admin:latest
            --cache-from $DOCKER_IMAGE/node-website:latest
            --cache-from $DOCKER_IMAGE/server:latest
        - docker build . --target development  -t $DOCKER_IMAGE/development:$TAG
            --cache-from $DOCKER_IMAGE/composer:latest
            --cache-from $DOCKER_IMAGE/node-admin:latest
            --cache-from $DOCKER_IMAGE/node-website:latest
            --cache-from $DOCKER_IMAGE/server:latest
        # push new images to registry
        - docker push $DOCKER_IMAGE/composer:latest
        - docker push $DOCKER_IMAGE/node-admin:latest
        - docker push $DOCKER_IMAGE/node-website:latest
        - docker push $DOCKER_IMAGE/server:latest
        - docker push $DOCKER_IMAGE/production:$TAG
        - docker push $DOCKER_IMAGE/staging:$TAG
        - docker push $DOCKER_IMAGE/development:$TAG
    only:
        - branches
        - master
        - /^deploy\/.+$/
        - /^fastlane\/.+$/

.deploy_template: &deploy_job
.deploy_template: &deploy_job
  stage: deploy
  image: dtzar/helm-kubectl
  before_script:
    - apk update
    - apk add --no-cache git python3  make m4
  script:
    - export TAG=$(git describe --abbrev=0 --tags)
    - if [ ${CI_COMMIT_REF_SLUG} == 'master' ]; then export VERSION_TAG=${TAG}; else export VERSION_TAG=${CI_COMMIT_REF_SLUG}; fi;
    - kubectl apply -f kubernetes/app.${RUNTIME}.yaml

deploy_production:
  <<: *deploy_job
  when: manual
  only: [master]
  variables:
    RUNTIME: production
    APP_DIR: /data/apps/webisite/production
  environment:
    name: runtime/${RUNTIME}
    url: https://econ4future.org


deploy_staging:
  <<: *deploy_job
  only: [master]
  variables:
    RUNTIME: staging
    APP_DIR: /data/apps/webisite/staging
  environment:
    name: runtime/${RUNTIME}
    url: https://staging.econ4future.org